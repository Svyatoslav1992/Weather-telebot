# –ü–õ–ê–ù –ü–†–û–ï–ö–¢–ê
#  OK:–∑–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
#  OK:–ø–æ–≥–æ–¥–∞ –ø–æ –∫–ª–∏–∫—É
#  OK:–ø–æ–≥–æ–¥–∞ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
#  OK:–ø–æ–≥–æ–¥–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
#  OK:–∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
#  NO:–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —á—Ç–æ –Ω–∞–¥–µ—Ç—å
#  OK:–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ—Ç–∏–∫–æ–≤ –∏ —Å–æ–±–∞—á–µ–∫
#  OK:–∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
#  OK:–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≥–æ–¥—ã –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
#  OK:–¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∏
#  OK:–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π
#  OK:–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
#  OK:—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#  OK:–∫–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
#  OK:–∫–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
#  --:—Ä–∞–∑–±–∏—Ç—å –ø–æ —Ñ–∞–π–ª–∞–º
#  --:–Ω–∞–ø–∏—Å–∞—Ç—å README


#-------------–ò–º–ø–æ—Ä—Ç—ã--------------

import os
import time
import schedule
import aioschedule
import asyncio
import datetime
import requests
import sqlite3
import logging


from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, Location,  ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime, date, timedelta

import aiogram.utils.markdown as md
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext

#-------------–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞--------------


"""–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç-–±–æ—Ç–∞"""
API_TOKEN = '5455050294:AAErOf5q80ZKp2Op5ETCaVt14ZQgxTeaUKE'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
user_id = None

base_button = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton(text='üê±'), KeyboardButton(text='üê∂'), KeyboardButton(text='ü¶ä')).row(KeyboardButton(text='–°–µ–≥–æ–¥–Ω—è'),KeyboardButton(text='–ó–∞–≤—Ç—Ä–∞')).add(KeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏'))

base_button_msg = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã: \n–ö–Ω–æ–ø–∫–∏ üê±üê∂ü¶ä –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏. \n–ö–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è" –∏ "–ó–∞–≤—Ç—Ä–∞" –ø–æ–∫–∞–∂—É—Ç —Ç–µ–±–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ–≥–æ–¥—É. \n–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–º–µ–Ω–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–≥–æ–¥—ã.'

"""–í—Å–µ –¢–æ–∫–µ–Ω—ã"""
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
WEATHER_APP_ID = os.getenv('WEATHER_APP_ID')

"""–í—Å–µ URLs"""
URL_WEATHER = "http://api.openweathermap.org/data/2.5/weather"
URL_FORECAST = "http://api.openweathermap.org/data/2.5/forecast"
URL_CAT = 'https://api.thecatapi.com/v1/images/search'
URL_DOG = 'https://dog.ceo/api/breeds/image/random'
URL_FOX = 'https://randomfox.ca/floof'

#----------–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö-----------

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def create_database():
    """ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. """
    if os.path.exists('users_database.db'):
        os.remove('users_database.db')
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
    else:
        logging.info("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
    # –°–æ–∑–¥–∞–Ω–∏–µ –ë–î    
    conn = sqlite3.connect('users_database.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE users
                 (user_id INT NOT NULL,
                 user_name TEXT NOT NULL,
                 lat REAL NULL,
                 lon REAL NULL,
                 time_msg TEXT NULL);''')
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
    conn.close()


async def create_user(user_id, user_name):
    """ –°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. """
    conn = sqlite3.connect('users_database.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO users (user_id, user_name)
        VALUES (?, ?)
    ''', (user_id, user_name))
    conn.commit()


async def update_geo_user(user_id, lat, lon):
    """ –û–±–Ω–æ–≤–ª—è–µ—Ç –≥–µ–æ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. """
    conn = sqlite3.connect('users_database.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE users
        SET lat=?, lon=?
        WHERE user_id=?
    ''', (lat, lon, user_id))
    conn.commit()


async def update_time_user(user_id, time_msg):
    """ –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. """
    conn = sqlite3.connect('users_database.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE users
        SET time_msg=?
        WHERE user_id=?
    ''', (time_msg, user_id))
    conn.commit()


async def get_user(user_id):
    """ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. """
    conn = sqlite3.connect('users_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
    return cursor.fetchone()


#-------------–ö–Ω–æ–ø–∫–∏--------------


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    """ –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ–≤–µ—â–µ–Ω–∏—è –≤ –ë–î. """
#   –õ–æ–≥–∏ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    global user_id
    user_id = message.from_user.id
    user_name = message.from_user.username
    await create_user(user_id = user_id, user_name=user_name)
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: {user_name}')
    start_text = '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç. –Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –µ—ë –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Ç–æ–±–æ–π –≤—Ä–µ–º—è! –ê —Ç–∞–∫ –∂–µ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∑–≤–µ—Ä—É—à–µ–∫.\n'
    is_geo = '–ï—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.'
    not_is_geo = '–î–∞–≤–∞–π —Å–ø–µ—Ä–≤–∞ —É–∑–Ω–∞–µ–º, –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞.'
    user = await get_user(user_id)
    if user[3] == None:
        await message.answer(start_text + not_is_geo, reply_markup=get_keyboard())
    else:
        await message.answer(start_text + is_geo, reply_markup=base_button)
   

@dp.message_handler(content_types = ['location'])
async def handle_location(message: types.Message):
   """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
   """–ü–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Telegramm –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ë–î"""
   user_id = message.from_user.id
   lat = message.location.latitude
   lon = message.location.longitude
   await update_geo_user(user_id = user_id, lat = lat, lon = lon)
   user = await get_user(user_id)
   logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} –æ–±–Ω–æ–≤–∏–ª –≥–µ–æ–¥–∞–Ω–Ω—ã–µ –Ω–∞: {lat}, {lon}') 
   await message.answer(base_button_msg, reply_markup =base_button)


def get_keyboard():
   """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
   keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
   button = types.KeyboardButton('–£–∫–∞–∑–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location = True)
   keyboard.add(button)
   return keyboard


@dp.message_handler(text=['–ù–∞–∑–∞–¥'])
async def settings_back(message: types.Message):
    """–í—ã—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"""
    await message.answer(base_button_msg, reply_markup=base_button)


@dp.message_handler(text=['–ù–∞—Å—Ç—Ä–æ–π–∫–∏'])
async def settings(message: types.Message):
    """–í—ã—Ö–æ–¥ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    user = await get_user(user_id)
    user_time = user[4]
    if user_time == None:
        button = KeyboardButton(text='–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è')
    else:
        button = KeyboardButton(text='–í—ã–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ')
    markup = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton(text='–£–∫–∞–∑–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location = True)).add(button).add(KeyboardButton(text='–ù–∞–∑–∞–¥'))
    await message.answer("–î–ª—è —Å–º–µ–Ω—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start \n–î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã –≤—ã–±–µ—Ä–µ—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é", reply_markup=markup)


#-------------–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≥–æ–¥—ã--------------
     

@dp.message_handler(text=['–°–µ–≥–æ–¥–Ω—è','–ó–∞–≤—Ç—Ä–∞'])
async def weather_man(message: types.Message):
    """ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É. """
    msg_text = await weather(message.text)
    user = await get_user(user_id)
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–≥–æ–¥—É')
    await message.answer(''. join(msg_text))
    
async def weather_auto():
    """ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. """
    user = await get_user(user_id)
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[1]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–≥–æ–¥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é')
    msg_text = await weather()
    await bot.send_message(user_id, ''. join(msg_text))   
                                            
async def weather(day = '–°–µ–≥–æ–¥–Ω—è'):    
    """ –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ. """
    user = await get_user(user_id)
    PARAMS_WEATHER = {'lat': user[2],'lon': user[3], 'units': 'metric', 'lang': 'ru', 'APPID': WEATHER_APP_ID}
    msg_weather = '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞:\n'
    try:
        res = requests.get(URL_FORECAST, params=PARAMS_WEATHER)
        first_day_month = 1
        if day == '–°–µ–≥–æ–¥–Ω—è':
            data = res.json()['list'][0:5]
        elif day == '–ó–∞–≤—Ç—Ä–∞':
            data = res.json()['list'][6:13]
        time_shift = 0
        for i in data:
            date = datetime.strptime(i['dt_txt'], "%Y-%m-%d %H:%M:%S")
            real_date = datetime.strptime(i['dt_txt'], "%Y-%m-%d %H:%M:%S")+timedelta(seconds=time_shift)
            if first_day_month != real_date.day <= datetime.now().day:
                today_text = f'{emoji_time(real_date)}' +'–°–µ–≥–æ–¥–Ω—è –≤'
            else:
                today_text = f'{emoji_time(real_date)}' +'–ó–∞–≤—Ç—Ä–∞ –≤'
            w_time =  f'{real_date.hour}:00'
            w_temp =  'üå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:' + '{0:+6.0f}'.format(i['main']['temp']) + '¬∞'
            w_wind = 'üí®–í–µ—Ç–µ—Ä: '+ str(i['wind']['speed']) + ' –º/—Å'
            w_feels = 'üå°–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ' + str(i['main']['feels_like']) + '¬∞'
            w_desc = emoji_desc(i['weather'][0]['description'])
            msg_weather += (f' {today_text} {w_time}\n {w_temp}\n {w_feels}\n {w_wind}\n {w_desc}\n\n')
        return msg_weather
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:", e)
        pass      

def emoji_time(real_date):
     """ –ü–æ–¥–±–∏—Ä–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–º—ã–π emoji –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–Ω–∏. """
     time = real_date.hour
     if time == 12 or time == 0:
         return 'üïõ'
     elif time == 15 or time == 3:
         return 'üïí'
     elif time == 18 or time == 6:
         return 'üïï'
     elif time == 21 or time == 9:
         return 'üïò'

def emoji_desc(description):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã. """
    if description == '—è—Å–Ω–æ':
        return '‚òÄÔ∏è–Ø—Å–Ω–æ'
    elif description == '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å':
        return '‚õÖÔ∏è–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—åÔ∏è'
    elif description == '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å':
        return '‚õÖÔ∏è–ù–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—åÔ∏è'
    elif description == '–ø–∞—Å–º—É—Ä–Ω–æ':
        return '‚òÅ–ü–∞—Å–º—É—Ä–Ω–æ'
    elif description == '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏':
        return 'üå•–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏'
    elif description == '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å':
        return 'üåß–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å'
    elif description == '–¥–æ–∂–¥—å':
        return 'üåß–î–æ–∂–¥—å'
    elif description == '—Ç—É–º–∞–Ω':
        return 'üå´–¢—É–º–∞–Ω'
    elif description == '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥':
        return 'üå®–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥'
    elif description == '—Å–Ω–µ–≥':
        return 'üå®–°–Ω–µ–≥'
    else:
        return 'üî¥' + description

#-------------–ö–æ—Ç–∏–∫–∏ —Å–æ–±–∞—á–∫–∏--------------


@dp.message_handler(text=['üê±', 'üê∂', 'ü¶ä'])
async def send_image(message: types.Message):
    """ –ü—Ä–∏—Å—ã–ª–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π –∑–≤–µ—Ä—É—à–∫–∏. """
    user = await get_user(user_id)
    if message.text == 'üê±':
        response = requests.get(URL_CAT).json()[0]
        text = 'url'
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ—Ç–∏–∫–æ–≤')
    elif message.text == 'üê∂':
        response = requests.get(URL_DOG).json()
        text = 'message'
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–±–∞—á–µ–∫')
    elif message.text == 'ü¶ä':
        response = requests.get(URL_FOX).json()
        text = 'image'
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} –∑–∞–ø—Ä–æ—Å–∏–ª –ª–∏—Å–∏—á–µ–∫')
    await bot.send_photo(user_id, response.get(text))


#-------------–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏--------------


@dp.message_handler(text='–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è')
async def specify_time(message: types.Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"""
    button_1 = KeyboardButton(text='07:00')
    button_2 = KeyboardButton(text='08:00')
    button_3 = KeyboardButton(text='09:00')
    markup = ReplyKeyboardMarkup(resize_keyboard=True).row(button_1, button_2, button_3)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 07:30), –≤ –∫–æ—Ç–æ—Ä–æ–µ –í–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–∂–µ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",reply_markup = markup)


# –í–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
@dp.message_handler()
async def save_message(message: types.Message):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è."""
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ '–í—ã–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ' —Ç–æ –æ—Ç–∫–ª—é—á–∞–µ—Ç –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ –ë–î, –µ—Å–ª–∏ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ, —Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    time_msg = message.text   
    user = await get_user(user_id)
    if time_msg != "–í—ã–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ":
        try:
            new_time = datetime.strptime(time_msg, "%H:%M")
            logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} –∏–∑–º–µ–Ω–∏–ª –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –Ω–∞ {time_msg}')
            await update_time_user(user_id, time_msg)
            await start_scheduler()
            await bot.send_message(message.from_user.id, f"–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ –Ω–∞ {time_msg}", reply_markup = base_button)
        except ValueError:
            # –ù–µ –∑–∞–±—ã—Ç—å —É–±—Ä–∞—Ç—å –ø—Ä–∏–Ω—Ç
            print('oops')
            markup = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton(text='–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è'))
            return await message.reply("–í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup = markup)
    else:
        time_msg = None
        await update_time_user(user_id, time_msg)
        await stop_scheduler()
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} –æ—Ç–∫–ª—é—á–∏–ª —Ñ—É–Ω–∫—Ü–∏—é –æ–ø–æ–≤–µ—â–µ–Ω–∏—è')
        await message.reply("–§—É–Ω–∫—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞.",reply_markup = base_button)

#-------------–ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞--------------

async def scheduler():
    """ –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. """
    user = await get_user(user_id)
    if user != None:
        user_time = user[4]
        aioschedule.every().day.at(f'{user_time}').do(weather_auto)
        while True:
            await aioschedule.run_pending()
            await asyncio.sleep(5)

async def start_scheduler():
    """ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏. """
    global task
    task = asyncio.create_task(scheduler())
    user = await get_user(user_id)
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} –∑–∞–ø—É—Å—Ç–∏–ª –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É –æ–ø–æ–≤–µ—â–µ–Ω–∏–π!')
        
async def stop_scheduler():
    """ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏. """
    schedule.CancelJob
    user = await get_user(user_id)
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É –æ–ø–æ–≤–µ—â–µ–Ω–∏–π!')   


#-------------Main--------------

if __name__ == '__main__':
    print('start')
    logging.basicConfig(filename='logger.txt',level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    executor.start_polling(dp, skip_updates=False)
